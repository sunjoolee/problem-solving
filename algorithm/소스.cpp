#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;


//--------------------------------------
//이분 매칭 문제를 해결하는 증가 경로 알고리즘

//A와 B의 정점의 개수
int n, m;

//adj[i][j] = Ai와 Bj가 연결되어 있는가?
bool adj[MAX_N][MAX_M];

//각 정점에 매칭된 상대 정점의 번호를 저장한다
vector<int> aMatch, bMatch;

//dis()의 방문 여부
vector<bool> visited;

//A의 정점인 a에서 B의 매칭되지 않은 정점으로 가는 경로를 찾는다
bool dfs(int a) {
	if (visited[a]) return false;
	visited[a] = true;
	for (int b = 0; b < m; ++b) {
		if (adj[a][b]) {
			//b가 매칭되어 있지 않다면 bMatch[b]에서부터 시작해 증가 경로를 찾는다
			if (bMatch[b] == -1 || dfs(bMatch[b])) {
				//증가 경로 발견 -> a와 b를 매치시킨다
				aMatch[a] = b;
				bMatch[b] = a;
				return true;
			}
		}
	}
	return false;
}

//aMatch, bMatch 배열을 계산하고 최대 매칭의 크기를 반환한다
int bipartiteMatch(){
	//처음에는 어떤 정점도 연결되어 있지 않다
	aMatch = vector<int>(n, -1);	
	bMatch = vector<int>(m, -1);
	
	int size = 0;
	for (int start = 0; start < n; ++start) {
		visited = vector<bool>(n, false);
		//깊이 우선 탐색을 통해 start에서 시작하는 증가 경로를 찾는다
		if (dfs(start))
			++size;
	}
	return size;
}

//--------------------------------------
//도미노로 직사각형 채우기 문제 해결하기

const int MAX_N = 50;
const int MAX_M = 50;

const int dx[4] = { -1, -1, 0, 0 };
const int dy[4] = { 0, 0, 1, -1 };

//직사각형의 정보
int H, W;

//(y, x)가 직사각형 범위 안의 칸인지 확인한다
bool inRange(int y, int x) {
	if (y < 0 || y >= H) return false;
	if (x < 0 || x >= W) return false;
	return true;
}

vector<string> board;

//주어진 직사각형에 도미노를 채울 수 있는지 여부를 반환한다
bool fillDomino() {

	//각 칸을 표현하는 정점의 번호
	vector<vector<int>> id(H, vector<int>(W, -1));
	

	//각 칸을 순회하며 번호를 매긴다
	n = m = 0;
	for (int y = 0; y < H; ++y) {
		for (int x = 0; x < W; ++x) {
			if (board[y][x] != '#') {
				//y+x가 짝수인지 홀수인지에 따라 검은 칸인지 흰 칸인지 구분
				if ((y + x) % 2 == 0) id[y][x] = n++;
				else id[y][x] = m++;
			}
		}
	}

	//adj[i][j]를 채운다
	memset(adj, 0, sizeof(adj));

	//A에 속한 모든 칸에 대해 인접한 칸을 검사한다
	for (int y1 = 0; y1 < H; ++y1) {
		for (int x1 = 0; x1 < W; ++x1) {
			if ((y1 + x1) % 2 == 0 && board[y1][x1] != '#') {
				//(y1, x1)의 모든 인접한 칸을 검사한다
				for (int k = 0; k < 4; ++k) {
					int y2 = y1 + dy[k];
					int x2 = x1 + dx[k];
					//(y2, x2)가 범위 안에 있는 빈 칸이라면 두 정점 연결
					if (inRange(y2, x2) && board[y2][x2] != '#')
						adj[id[y1][x1]][id[y2][x2]] = 1;
				}
			}
		}
	}

	//이분 매칭의 크기가 빈 칸의 수의 절반이어야 한다
	return bipartiteMatch() * 2 == (n + m);
}


int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);

	return 0;
}